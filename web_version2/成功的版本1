# --------------------------------------------------------------------------
# 智慧排班系統 - Flask 網頁應用程式 (v2.1 - 修正即時日誌)
# --------------------------------------------------------------------------
# 專案結構:
# /app.py                  <-- 主應用程式 (運行這個檔案)
# /scheduler.py            <-- 核心排班引擎 (從您的程式碼重構)
# /templates/
#   - admin.html           <-- 管理員儀表板
#   - doctor.html          <-- 醫師排休介面
#   - index.html           <-- 登入首頁
# /static/
#   - css/
#     - style.css          <-- 網站樣式
#   - js/
#     - main.js            <-- 主要的 JavaScript 互動邏輯
# /output/                 <-- 用來存放產生的 Excel 報表 (會自動建立)
# --------------------------------------------------------------------------

# 檔案: app.py
# 說明: 這是網站的核心，負責處理所有請求、資料和邏輯。

import os
import io
import pandas as pd
from flask import Flask, render_template, request, jsonify, Response, send_from_directory
import json
import threading
from datetime import datetime
from collections import defaultdict
from queue import Queue
import holidays

# 匯入我們重構後的排班引擎
from scheduler import solve_schedule_web

# --- 應用程式設定 ---
app = Flask(__name__)
app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 0 # 開發時禁用快取

# 確保 output 資料夾存在
if not os.path.exists('output'):
    os.makedirs('output')

# --- 全域資料儲存 (在真實應用中，這會是資料庫) ---
DOCTOR_DATA_TEMPLATE = {}
DOCTOR_SCHEDULE_SUBMISSIONS = defaultdict(lambda: defaultdict(dict))

def initialize_data():
    """從您的原始腳本中讀取並初始化醫師資料"""
    global DOCTOR_DATA_TEMPLATE, DOCTOR_SCHEDULE_SUBMISSIONS
    csv_data = """
醫師姓名,區域,點數上限,不可排班日
如,A,8,"26,27"
秀,A,8,"1,2,5,6"
橋,A,6,"1,2,3,4,5,6,7,8,9,19,20"
君,A,6,"4"
翔,A,6,"1,3,4"
航,A,8,"1,14,15,16,17,18,19,20"
淇,B,8,"1,2,25,28"
慈,B,8,"3,4"
恩,B,8,""
屹,B,8,"4,5"
軒,B,6,"2,3,5"
佑,C,8,""
翰,C,6,"1,2,3,4,5,6,7,8,9,13,27"
潔,C,5,"16,17,18,19,20,21,22,23,24,25,26,27,28,29,30"
諺,C,5,"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,26"
宣,C,8,"26,27"
韶,C,8,"2,3,4,5,6,7,8"
然,I,8,"1,2,3,4,5,6"
偉,I,8,"1,2,4,5"
煒,I,7,"21,22,23,24,25,26,27,28,29,30"
"""
    data_io = io.StringIO(csv_data)
    df = pd.read_csv(data_io, engine='python')
    df.columns = df.columns.str.strip()
    
    for _, row in df.iterrows():
        doc_name = row['醫師姓名']
        DOCTOR_DATA_TEMPLATE[doc_name] = {
            '區域': row['區域'],
            '點數上限': int(row['點數上限']),
            '不可排班日_範本': [int(d) for d in str(row['不可排班日']).split(',') if d.strip().isdigit()]
        }

    current_year = 2025
    for month in range(1, 13):
        month_key = f"{current_year}-{str(month).zfill(2)}"
        days_in_month = pd.Period(f'{current_year}-{month}-01').days_in_month
        for doc_name, data in DOCTOR_DATA_TEMPLATE.items():
            valid_days_off = [d for d in data['不可排班日_範本'] if d <= days_in_month]
            DOCTOR_SCHEDULE_SUBMISSIONS[month_key][doc_name] = {
                'submitted': False,
                'days_off': valid_days_off
            }

initialize_data()

# --- 網頁路由 (Routes) ---

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/doctor')
def doctor_portal():
    doctors = list(DOCTOR_DATA_TEMPLATE.keys())
    return render_template('doctor.html', doctors=doctors)

@app.route('/admin')
def admin_portal():
    return render_template('admin.html')

@app.route('/output/<filename>')
def serve_output_file(filename):
    return send_from_directory('output', filename, as_attachment=True)

# --- API 端點 (for JavaScript) ---

@app.route('/api/doctor_info/<name>')
def get_doctor_info(name):
    if name in DOCTOR_DATA_TEMPLATE:
        return jsonify(DOCTOR_DATA_TEMPLATE[name])
    return jsonify({'error': 'Doctor not found'}), 404

@app.route('/api/schedule_data/<year>/<month>')
def get_schedule_data(year, month):
    month_key = f"{year}-{str(month).zfill(2)}"
    
    tw_holidays = holidays.TW(years=int(year))
    holiday_list = [d.day for d in tw_holidays if d.month == int(month)]

    response_data = {
        "submissions": DOCTOR_SCHEDULE_SUBMISSIONS.get(month_key, {}),
        "holidays": holiday_list
    }
    return jsonify(response_data)

@app.route('/api/submit_days_off', methods=['POST'])
def submit_days_off():
    data = request.json
    year, month, doc_name, days_off = data.get('year'), data.get('month'), data.get('doctor'), data.get('daysOff')
    month_key = f"{year}-{str(month).zfill(2)}"
    
    if month_key in DOCTOR_SCHEDULE_SUBMISSIONS and doc_name in DOCTOR_SCHEDULE_SUBMISSIONS[month_key]:
        DOCTOR_SCHEDULE_SUBMISSIONS[month_key][doc_name]['days_off'] = days_off
        DOCTOR_SCHEDULE_SUBMISSIONS[month_key][doc_name]['submitted'] = True
        return jsonify({'status': 'success', 'message': f'{doc_name} 於 {month_key} 的預休已更新。'})
    
    return jsonify({'status': 'error', 'message': '找不到對應的資料'}), 400

@app.route('/api/run_scheduler') # *** 修正: 移除 methods=['POST']，改為接受 GET 請求
def run_scheduler_endpoint():
    # *** 修正: 從 URL 查詢參數讀取資料，而不是 request.json
    year = int(request.args.get('year'))
    month = int(request.args.get('month'))
    month_key = f"{year}-{str(month).zfill(2)}"
    
    current_doctor_data = []
    month_submissions = DOCTOR_SCHEDULE_SUBMISSIONS.get(month_key, {})
    for name, template in DOCTOR_DATA_TEMPLATE.items():
        submission = month_submissions.get(name, {'days_off': []})
        current_doctor_data.append({
            '醫師姓名': name, '區域': template['區域'], '點數上限': template['點數上限'], '不可排班日': submission['days_off']
        })

    q = Queue()

    def event_stream():
        while True:
            log_entry = q.get()
            if log_entry == "DONE":
                break
            
            if isinstance(log_entry, str):
                yield f"data: {log_entry}\n\n"
            elif isinstance(log_entry, dict) and 'status' in log_entry:
                json_data = json.dumps(log_entry)
                yield f"event: DONE\ndata: {json_data}\n\n"

    threading.Thread(target=solve_schedule_web, args=(current_doctor_data, year, month, q)).start()

    return Response(event_stream(), mimetype='text/event-stream')

# --- 主程式入口 ---
if __name__ == '__main__':
    init_thread = threading.Thread(target=initialize_data)
    init_thread.start()
    app.run(host='0.0.0.0', port=5000, debug=True)

# --------------------------------------------------------------------------
# 檔案: scheduler.py
# (此檔案無變動)
# --------------------------------------------------------------------------
import pandas as pd
from ortools.sat.python import cp_model
import holidays
from openpyxl.styles import PatternFill, Font, Alignment, Border, Side
from openpyxl.utils import get_column_letter
from collections import defaultdict
import os

class WebSolutionCounter(cp_model.CpSolverSolutionCallback):
    def __init__(self, objectives, weights, queue_callback):
        super().__init__()
        self._solution_count = 0
        self._objectives = objectives
        self._weights = weights
        self.queue_callback = queue_callback # 現在是 queue.put
        self._display_order = [
            ('total_used_points', '總使用點數'), ('linear_gaps_bonus', '線性間隔獎勵'),
            ('min_gap_count', '隔兩天次數(懲罰)'), ('fairness_penalty', '同儕公平性(懲罰)'),
            ('total_shifts_filled', '總排班數量'), ('i_priority_bonus', 'I 區優先獎勵'),
            ('home_area_bonus', '在家區域獎勵')
        ]

    def on_solution_callback(self):
        self._solution_count += 1
        self.queue_callback(f"\n--- 找到第 {self._solution_count} 個可行解 ---")
        total_score = 0
        for key, display_name in self._display_order:
            if key in self._objectives:
                raw_val = self.Value(self._objectives[key])
                score = raw_val * self._weights[key]
                total_score += score
                self.queue_callback(f"  - {display_name:<12}: {raw_val:>5} (分數: {int(score)})")
        self.queue_callback(f"  >> 此解總分: {int(total_score)}")

    def solution_count(self):
        return self._solution_count

def format_excel(writer, doctor_schedule_df, weekend_days, official_holidays, doctor_info):
    # (此函式內容不變，與您原始碼相同)
    workbook = writer.book
    ws_doctor = writer.sheets['醫師月曆班表']
    colors = {'A': 'ADD8E6', 'B': '90EE90', 'C': 'FFFFE0', 'I': 'FFB6C1'}
    fills = {k: PatternFill(start_color=v, end_color=v, fill_type="solid") for k, v in colors.items()}
    weekend_fill = PatternFill(start_color='F2F2F2', end_color='F2F2F2', fill_type="solid")
    holiday_fill = PatternFill(start_color='FFDDC1', end_color='FFDDC1', fill_type="solid")
    unavailable_fill = PatternFill(patternType='gray0625', fgColor='A9A9A9')
    header_fill = PatternFill(start_color='DDEBF7', end_color='DDEBF7', fill_type="solid")
    header_font = Font(bold=True, color='000000')
    center_align = Alignment(horizontal='center', vertical='center', wrap_text=True)
    thin_border = Border(left=Side(style='thin'), right=Side(style='thin'), top=Side(style='thin'), bottom=Side(style='thin'))

    for col_idx, day in enumerate(doctor_schedule_df.columns, 2):
        fill_to_apply = None
        if day in official_holidays: fill_to_apply = holiday_fill
        elif day in weekend_days: fill_to_apply = weekend_fill
        if fill_to_apply:
            for row_idx in range(1, ws_doctor.max_row + 1):
                ws_doctor.cell(row=row_idx, column=col_idx).fill = fill_to_apply

    for r_idx, doc in enumerate(doctor_schedule_df.index, 2):
        ws_doctor.cell(row=r_idx, column=1).font = Font(bold=True)
        ws_doctor.row_dimensions[r_idx].height = 25
        for c_idx, day in enumerate(doctor_schedule_df.columns, 2):
            cell = ws_doctor.cell(row=r_idx, column=c_idx)
            cell.alignment = center_align
            cell.border = thin_border
            if cell.value and cell.value in fills:
                cell.fill = fills[cell.value]
    
    doc_to_row_map = {doc: i + 2 for i, doc in enumerate(doctor_schedule_df.index)}
    for doc, info in doctor_info.items():
        row_idx = doc_to_row_map[doc]
        for day_off in info['不可排班日']:
            if day_off in doctor_schedule_df.columns:
                cell = ws_doctor.cell(row=row_idx, column=day_off + 1)
                cell.fill = unavailable_fill
                cell.value = "預休"
                cell.font = Font(color='FFFFFF', bold=True)

    for col_idx in range(1, ws_doctor.max_column + 1):
        cell = ws_doctor.cell(row=1, column=col_idx)
        cell.font = header_font
        cell.alignment = center_align
        cell.border = thin_border
        cell.fill = header_fill
        ws_doctor.column_dimensions[get_column_letter(col_idx)].width = 6
    ws_doctor.row_dimensions[1].height = 20
    ws_doctor.column_dimensions['A'].width = 12

    ws_summary = writer.sheets['點數統計總覽']
    for col_idx in range(1, ws_summary.max_column + 1):
        ws_summary.column_dimensions[get_column_letter(col_idx)].width = 15
        ws_summary.cell(row=1, column=col_idx).font = header_font
        ws_summary.cell(row=1, column=col_idx).fill = header_fill

def solve_schedule_web(doctor_data, year, month, q):
    """
    排班主函式，現在接受一個 Queue 物件來傳遞日誌。
    """
    try:
        q.put("1. 正在讀取前端傳來的醫師資料...")
        df = pd.DataFrame(doctor_data)
        
        YEAR, MONTH = year, month
        num_days = pd.Period(f'{YEAR}-{MONTH}-01').days_in_month
        date_range = pd.to_datetime(pd.Series(pd.date_range(start=f'{YEAR}-{MONTH}-01', end=f'{YEAR}-{MONTH}-{num_days}')))
        weekend_days = date_range[date_range.dt.dayofweek.isin([5, 6])].dt.day.tolist()
        official_holidays = [d.day for d in holidays.TW(years=YEAR) if d.month == MONTH]
        double_point_days = set(weekend_days + official_holidays)
        doctors = df['醫師姓名'].tolist()
        areas = ['A', 'B', 'C', 'I']
        doctor_info = df.set_index('醫師姓名').to_dict('index')

        q.put("2. 正在建立數學模型...")
        model = cp_model.CpModel()
        
        shifts = {}
        for doc in doctors:
            for day in range(1, num_days + 1):
                for area in areas:
                    shifts[(doc, day, area)] = model.NewBoolVar(f'shift_{doc}_{day}_{area}')

        # --- 硬性規則 (與原始碼相同) ---
        for day in range(1, num_days + 1):
            for area in areas: model.AddAtMostOne([shifts[(doc, day, area)] for doc in doctors])
        for day in range(1, num_days + 1):
            for doc in doctors: model.AddAtMostOne([shifts[(doc, day, area)] for area in areas])
        i_doctors = [d for d, info in doctor_info.items() if info['區域'] == 'I']
        support_doctors = [d for d, info in doctor_info.items() if info['區域'] in ['A', 'B', 'C']]
        for day in range(1, num_days + 1): model.Add(sum(shifts[(doc, day, 'I')] for doc in support_doctors) == 0)
        for doc in doctors:
            for day in range(1, num_days - 1): model.Add(sum(shifts[doc, d, area] for area in areas for d in range(day, day+3)) <= 1)
        for doc in doctors:
            for day in doctor_info[doc]['不可排班日']:
                if 1 <= day <= num_days:
                    for area in areas: model.Add(shifts[(doc, day, area)] == 0)
        points_per_doctor = {}
        for doc in doctors:
            points_for_doc = sum(shifts[(doc, day, area)] * (2 if day in double_point_days else 1) for day in range(1, num_days + 1) for area in areas)
            points_per_doctor[doc] = points_for_doc
            model.Add(points_per_doctor[doc] <= doctor_info[doc]['點數上限'])

        # --- 軟性目標 (與原始碼相同) ---
        is_work_day = {}
        for doc in doctors:
            for day in range(1, num_days + 1):
                is_work_day[doc, day] = model.NewBoolVar(f'is_work_day_{doc}_{day}')
                model.Add(is_work_day[doc, day] == sum(shifts[doc, day, area] for area in areas))
        total_used_points = sum(points_per_doctor.values())
        all_linear_bonuses = []
        for doc in doctors:
            for d1 in range(1, num_days + 1):
                for d2 in range(d1 + 1, num_days + 1):
                    is_consecutive = model.NewBoolVar(f'consecutive_{doc}_{d1}_{d2}')
                    no_work_in_between_literals = [is_work_day[doc, d].Not() for d in range(d1 + 1, d2)]
                    model.AddBoolAnd([is_work_day[doc, d1], is_work_day[doc, d2]] + no_work_in_between_literals).OnlyEnforceIf(is_consecutive)
                    model.AddBoolOr([is_work_day[doc, d1].Not(), is_work_day[doc, d2].Not()] + [is_work_day[doc, d] for d in range(d1 + 1, d2)]).OnlyEnforceIf(is_consecutive.Not())
                    gap = d2 - d1
                    linear_bonus = 10 * gap
                    all_linear_bonuses.append(is_consecutive * linear_bonus)
        total_linear_gaps_bonus = sum(all_linear_bonuses)
        min_gap_penalties = []
        for doc in doctors:
            for day in range(1, num_days - 2):
                has_min_gap = model.NewBoolVar(f'has_min_gap_{doc}_{day}')
                model.AddBoolAnd([is_work_day[doc, day], is_work_day[doc, day + 3]]).OnlyEnforceIf(has_min_gap)
                model.AddBoolOr([is_work_day[doc, day].Not(), is_work_day[doc, day + 3].Not()]).OnlyEnforceIf(has_min_gap.Not())
                min_gap_penalties.append(has_min_gap)
        total_min_gap_count = sum(min_gap_penalties)
        peer_groups = defaultdict(list)
        for doc, info in doctor_info.items():
            key = (info['區域'], info['點數上限'])
            peer_groups[key].append(doc)
        all_ranges = []
        for group_key, group_docs in peer_groups.items():
            if len(group_docs) > 1:
                group_points = [points_per_doctor[doc] for doc in group_docs]
                min_points, max_points = model.NewIntVar(0, 100, ''), model.NewIntVar(0, 100, '')
                model.AddMinEquality(min_points, group_points)
                model.AddMaxEquality(max_points, group_points)
                group_range = model.NewIntVar(0, 100, '')
                model.Add(group_range == max_points - min_points)
                all_ranges.append(group_range)
        fairness_penalty = sum(all_ranges)
        total_shifts_filled = sum(shifts.values())
        i_priority_bonus = sum(shifts[(doc, day, 'I')] for doc in i_doctors for day in range(1, num_days + 1))
        home_area_bonus = sum(shifts[(doc, day, info['區域'])] for doc, info in doctor_info.items() for day in range(1, num_days + 1))
        
        objectives = {'total_used_points': total_used_points, 'linear_gaps_bonus': total_linear_gaps_bonus, 'min_gap_count': total_min_gap_count, 'fairness_penalty': fairness_penalty, 'total_shifts_filled': total_shifts_filled, 'i_priority_bonus': i_priority_bonus, 'home_area_bonus': home_area_bonus}
        weights = {'total_used_points': 10000, 'linear_gaps_bonus': 10, 'min_gap_count': -500, 'fairness_penalty': -200, 'total_shifts_filled': 100, 'i_priority_bonus': 10, 'home_area_bonus': 0.1}
        model.Maximize(sum(objectives[name] * weights[name] for name in objectives))

        # --- 求解 ---
        solver = cp_model.CpSolver()
        solver.parameters.enumerate_all_solutions = True
        solution_counter = WebSolutionCounter(objectives, weights, q.put)
        solver.parameters.max_time_in_seconds = 120.0
        q.put(f"3. 正在運算，尋找所有可能的排班方案 ({YEAR}-{MONTH})...")
        status = solver.Solve(model, solution_counter)

        # --- 處理結果 ---
        if status == cp_model.OPTIMAL or status == cp_model.FEASIBLE:
            q.put("4. 已找到最佳解！正在生成視覺化報告...")
            
            final_schedule_data = defaultdict(dict)
            for doc in doctors:
                for day in range(1, num_days + 1):
                    for area in areas:
                        if solver.Value(shifts[(doc, day, area)]) == 1:
                            final_schedule_data[doc][day] = area

            points_summary_data = []
            for doc in doctors:
                points_used, days_worked = 0, []
                for day in range(1, num_days + 1):
                    if day in final_schedule_data.get(doc, {}):
                        area = final_schedule_data[doc][day]
                        points_used += 2 if day in double_point_days else 1
                        days_worked.append(f"{day}({area})")
                points_summary_data.append({'醫師姓名': doc, '區域': doctor_info[doc]['區域'], '點數上限': doctor_info[doc]['點數上限'], '實際點數': points_used, '剩餘點數': doctor_info[doc]['點數上限'] - points_used, '排班日與區域': ", ".join(days_worked)})
            
            final_scores = {display_name: solver.Value(objectives[key]) for key, display_name in solution_counter._display_order if key in objectives}

            doctor_schedule_df = pd.DataFrame(final_schedule_data).T.reindex(doctors).fillna('')
            doctor_schedule_df.columns = range(1, num_days + 1)
            points_summary_df = pd.DataFrame(points_summary_data)
            output_filename = f'schedule_result_{YEAR}-{MONTH}.xlsx'
            output_filepath = os.path.join('output', output_filename)
            with pd.ExcelWriter(output_filepath, engine='openpyxl') as writer:
                doctor_schedule_df.to_excel(writer, sheet_name='醫師月曆班表')
                points_summary_df.to_excel(writer, sheet_name='點數統計總覽', index=False)
                schedule_df = pd.DataFrame({area: [""] * num_days for area in areas}, index=range(1, num_days + 1))
                for doc, day_area_map in final_schedule_data.items():
                    for day, area in day_area_map.items():
                        schedule_df.loc[day, area] = doc
                schedule_df.to_excel(writer, sheet_name='區域班表')
                format_excel(writer, doctor_schedule_df, weekend_days, official_holidays, doctor_info)

            q.put(f"\n✅ **排班完成！**")
            q.put(f"   詳細結果請點擊下方的按鈕下載 **{output_filename}** 檔案。")
            q.put("\n--- 最終排班結果分析 ---")
            q.put(f"在所有規則限制下，系統總共找到了 **{solution_counter.solution_count()}** 種不同的可行排班方案。")
            q.put(f"呈現的是其中一個綜合評分最高的「最佳解」。")
            
            result_payload = {
                "status": "success", "final_scores": final_scores,
                "schedule_data": {
                    "doctors": doctors, "num_days": num_days,
                    "schedule": final_schedule_data,
                    "holidays": official_holidays,
                    "weekends": weekend_days,
                    "days_off": {doc: info['不可排班日'] for doc, info in doctor_info.items()}
                },
                "points_summary_html": points_summary_df.to_html(classes='table table-hover', index=False),
                "excel_url": f"/output/{output_filename}"
            }
            q.put(result_payload)
        else:
            q.put("\n❌ **錯誤：** 在目前的規則下，找不到任何可行的排班解。")
            q.put({"status": "error", "message": "找不到可行的排班解。"})
    
    except Exception as e:
        q.put(f"\n❌ **後端錯誤：** {e}")
        q.put({"status": "error", "message": f"後端發生錯誤: {e}"})
    finally:
        q.put("DONE")

# --------------------------------------------------------------------------
# 檔案: templates/index.html
# (此檔案無變動)
# --------------------------------------------------------------------------
<!DOCTYPE html>
<html lang="zh-Hant">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>智慧排班系統 - 首頁</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    <div class="container d-flex justify-content-center align-items-center vh-100">
        <div class="text-center auth-container p-5 rounded-3 shadow">
            <img src="https://www.gstatic.com/images/icons/material/system/2x/event_available_googblue_48dp.png" alt="Logo" class="mb-4">
            <h1 class="mb-4">智慧排班系統</h1>
            <p class="text-muted mb-4">請選擇您的身份以繼續</p>
            <div class="d-grid gap-3">
                <a href="/doctor" class="btn btn-primary btn-lg">我是醫師</a>
                <a href="/admin" class="btn btn-outline-secondary btn-lg">我是排班管理員</a>
            </div>
        </div>
    </div>
</body>
</html>

# --------------------------------------------------------------------------
# 檔案: templates/doctor.html
# (此檔案無變動)
# --------------------------------------------------------------------------
<!DOCTYPE html>
<html lang="zh-Hant">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>醫師排休系統</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    <div class="container-fluid">
        <div class="row">
            <!-- Sidebar -->
            <nav class="col-md-3 col-lg-2 d-md-block bg-light sidebar collapse">
                <div class="position-sticky pt-3">
                    <h4 class="sidebar-heading px-3 mt-2 mb-3">醫師儀表板</h4>
                    <div class="px-3 mb-3">
                        <label for="doctor-select" class="form-label">選擇醫師</label>
                        <select id="doctor-select" class="form-select">
                            <option selected disabled>請選擇您的姓名...</option>
                            {% for doc in doctors %}
                            <option value="{{ doc }}">{{ doc }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    <div id="doctor-info-card" class="px-3 d-none">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title" id="info-card-name"></h5>
                                <p class="card-text mb-1">
                                    <i class="bi bi-geo-alt-fill"></i> 區域: <span id="info-card-area" class="fw-bold"></span>
                                </p>
                                <p class="card-text">
                                    <i class="bi bi-graph-up"></i> 點數上限: <span id="info-card-points" class="fw-bold"></span>
                                </p>
                            </div>
                        </div>
                    </div>
                     <hr>
                    <a href="/" class="btn btn-outline-secondary mx-3"><i class="bi bi-arrow-left-circle"></i> 返回首頁</a>
                </div>
            </nav>

            <!-- Main content -->
            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
                <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                    <h1 class="h2">預休日期劃記</h1>
                </div>
                
                <div id="main-content" class="d-none">
                    <div class="d-flex align-items-center mb-3">
                        <select id="year-select" class="form-select me-2" style="width: 120px;"></select>
                        <select id="month-select" class="form-select" style="width: 100px;"></select>
                    </div>
                    
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 id="calendar-title" class="mb-0"></h5>
                            <div>
                                <span class="badge bg-light text-dark border me-2">可排休</span>
                                <span class="badge" style="background-color: #FFDDC1; color: #5f3f00;">國定假日</span>
                                <span class="badge bg-success ms-2">已選定</span>
                                <span class="badge bg-secondary ms-2">非本月</span>
                            </div>
                        </div>
                        <div class="card-body">
                            <p class="text-muted"><i class="bi bi-info-circle"></i> 提示：您可以直接在日曆上點擊或拖曳滑鼠來選取多個日期。</p>
                            <div id="calendar" class="calendar-grid"></div>
                        </div>
                        <div class="card-footer text-end">
                            <button id="submit-schedule" class="btn btn-success"><i class="bi bi-check-circle-fill"></i> 提交本月預休</button>
                        </div>
                    </div>
                </div>
                <div id="welcome-message" class="text-center p-5">
                    <h3>請先從左側選擇您的姓名</h3>
                </div>
            </main>
        </div>
    </div>

    <script src="{{ url_for('static', filename='js/main.js') }}"></script>
</body>
</html>

# --------------------------------------------------------------------------
# 檔案: templates/admin.html
# (此檔案無變動)
# --------------------------------------------------------------------------
<!DOCTYPE html>
<html lang="zh-Hant">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>管理員儀表板</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    <div class="container-fluid">
        <div class="row">
            <!-- Sidebar -->
            <nav class="col-md-4 col-lg-3 d-md-block bg-light sidebar collapse">
                <div class="position-sticky pt-3">
                    <h4 class="sidebar-heading px-3 mt-2 mb-3">管理員儀表板</h4>
                    <div class="px-3 mb-3">
                        <a href="/" class="btn btn-outline-secondary w-100"><i class="bi bi-arrow-left-circle"></i> 返回首頁</a>
                    </div>
                    <hr>
                    <h6 class="sidebar-heading px-3 mt-4 mb-2 text-muted">排班控制器</h6>
                    <div class="px-3">
                        <div class="mb-2">
                            <label for="admin-year-select" class="form-label">年份</label>
                            <select id="admin-year-select" class="form-select"></select>
                        </div>
                        <div class="mb-3">
                            <label for="admin-month-select" class="form-label">月份</label>
                            <select id="admin-month-select" class="form-select"></select>
                        </div>
                        <div class="d-grid">
                            <button id="run-scheduler-btn" class="btn btn-primary btn-lg" disabled>
                                <i class="bi bi-calculator-fill"></i> 一鍵排班
                            </button>
                        </div>
                        <small id="run-scheduler-help" class="form-text text-muted d-block mt-2">需所有醫師提交預休後方可啟用。</small>
                    </div>
                    <hr>
                    <h6 class="sidebar-heading px-3 mt-4 mb-2 text-muted">
                        <span id="status-month-title"></span> 預休提交狀態
                    </h6>
                    <div id="submission-status-container" class="px-3">
                        <ul id="submission-status-list" class="list-group list-group-flush">
                            <!-- JS will populate this -->
                        </ul>
                    </div>
                </div>
            </nav>

            <!-- Main content -->
            <main class="col-md-8 ms-sm-auto col-lg-9 px-md-4">
                <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                    <h1 class="h2">排班結果</h1>
                </div>

                <!-- Log Viewer -->
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <span><i class="bi bi-terminal-fill"></i> 即時運算日誌</span>
                        <button id="toggle-log-btn" class="btn btn-sm btn-outline-secondary d-none">收合/展開</button>
                    </div>
                    <div class="card-body">
                        <pre id="log-output" class="log-container bg-dark text-white p-3 rounded">請點擊「一鍵排班」開始運算...</pre>
                    </div>
                </div>

                <!-- Results Section -->
                <div id="results-section" class="d-none">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h3>最終結果</h3>
                        <a id="download-excel-btn" href="#" class="btn btn-success">
                            <i class="bi bi-file-earmark-excel-fill"></i> 下載完整 Excel 報表
                        </a>
                    </div>
                    
                    <ul class="nav nav-tabs" id="resultTabs" role="tablist">
                        <li class="nav-item" role="presentation"><button class="nav-link active" id="doctor-schedule-tab" data-bs-toggle="tab" data-bs-target="#doctor-schedule" type="button" role="tab">醫師月曆班表</button></li>
                        <li class="nav-item" role="presentation"><button class="nav-link" id="analysis-tab" data-bs-toggle="tab" data-bs-target="#analysis" type="button" role="tab">結果分析</button></li>
                        <li class="nav-item" role="presentation"><button class="nav-link" id="points-summary-tab" data-bs-toggle="tab" data-bs-target="#points-summary" type="button" role="tab">點數統計總覽</button></li>
                    </ul>

                    <div class="tab-content pt-3">
                        <div class="tab-pane fade show active" id="doctor-schedule" role="tabpanel">
                             <div id="doctor-schedule-render-area" class="table-responsive"></div>
                        </div>
                        <div class="tab-pane fade" id="analysis" role="tabpanel">
                            <div class="card"><div class="card-body"><h5 class="card-title">最終解評分指標</h5><ul id="final-scores-list" class="list-group list-group-flush"></ul></div></div>
                        </div>
                        <div class="tab-pane fade" id="points-summary" role="tabpanel">
                            <div class="table-responsive" id="points-summary-html"></div>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="{{ url_for('static', filename='js/main.js') }}"></script>
</body>
</html>

# --------------------------------------------------------------------------
# 檔案: static/css/style.css
# (此檔案無變動)
# --------------------------------------------------------------------------
body {
    font-family: 'Noto Sans TC', sans-serif;
    background-color: #f8f9fa;
}

.auth-container {
    background-color: white;
    max-width: 450px;
}

.sidebar {
    position: fixed;
    top: 0;
    bottom: 0;
    left: 0;
    z-index: 100;
    padding: 48px 0 0;
    box-shadow: inset -1px 0 0 rgba(0, 0, 0, .1);
}

.sidebar-sticky {
    position: relative;
    top: 0;
    height: calc(100vh - 48px);
    padding-top: .5rem;
    overflow-x: hidden;
    overflow-y: auto;
}

.sidebar .nav-link {
    font-weight: 500;
    color: #333;
}

.sidebar-heading {
    font-size: 1.1rem;
    text-transform: uppercase;
    color: #555;
}

/* --- Calendar Styles --- */
.calendar-grid {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 5px;
    user-select: none; /* 防止拖曳時選取文字 */
}

.calendar-day {
    border: 1px solid #e9ecef;
    padding: 10px;
    text-align: center;
    cursor: pointer;
    border-radius: .25rem;
    transition: all 0.2s ease-in-out;
}

.calendar-day.header {
    background-color: #f8f9fa;
    font-weight: bold;
    cursor: default;
}

.calendar-day.other-month {
    background-color: #f8f9fa;
    color: #adb5bd;
    cursor: not-allowed;
}

.calendar-day.available:not(.holiday):hover {
    background-color: #e2e6ea;
    transform: scale(1.05);
}

.calendar-day.holiday {
    background-color: #FFDDC1; /* 淺橘色 */
    color: #5f3f00;
}
.calendar-day.holiday:hover {
    background-color: #ffcdaa;
    transform: scale(1.05);
}

.calendar-day.selected {
    background-color: #198754 !important; /* Bootstrap success color */
    color: white !important;
    font-weight: bold;
    border-color: #198754;
}
.calendar-day.selecting {
    background-color: #cfe2ff !important; /* Bootstrap primary light */
    border-color: #9ec5fe;
}


/* --- Admin Page Styles --- */
.log-container {
    height: 300px;
    overflow-y: scroll;
    font-family: 'Courier New', Courier, monospace;
    white-space: pre-wrap;
    word-wrap: break-word;
    transition: height 0.3s ease-in-out;
}
.log-container.minimized {
    height: 100px;
}

#submission-status-container {
    max-height: 250px;
    overflow-y: auto;
}

#results-section .table-responsive {
    max-height: 70vh;
    overflow: auto;
}

/* --- Result Table Styles --- */
.schedule-table {
    width: 100%;
    border-collapse: collapse;
}
.schedule-table th, .schedule-table td {
    border: 1px solid #dee2e6;
    text-align: center;
    vertical-align: middle;
    padding: 0.5rem;
    min-width: 55px;
    height: 50px;
}
.schedule-table th {
    background-color: #e9ecef;
    position: sticky;
    top: 0;
    z-index: 2;
}
.schedule-table td:first-child, .schedule-table th:first-child {
    position: sticky;
    left: 0;
    background-color: #f8f9fa;
    font-weight: bold;
    z-index: 1;
}
.schedule-table th:first-child {
    z-index: 3;
}

.cell-weekend { background-color: #F2F2F2; }
.cell-holiday { background-color: #FFDDC1; }
.cell-dayoff {
    background-color: #6c757d;
    color: white;
    font-weight: bold;
}
.cell-area-A { background-color: #ADD8E6; }
.cell-area-B { background-color: #90EE90; }
.cell-area-C { background-color: #FFFFE0; }
.cell-area-I { background-color: #FFB6C1; }


#run-scheduler-btn:disabled {
    cursor: not-allowed;
}

#welcome-message {
    border: 2px dashed #ced4da;
    border-radius: 10px;
    color: #6c757d;
    margin-top: 5rem;
}

#final-scores-list .list-group-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
}
#final-scores-list .score-value {
    font-weight: bold;
    font-size: 1.1rem;
    font-family: 'Courier New', Courier, monospace;
}
#final-scores-list .score-penalty { color: #dc3545; }
#final-scores-list .score-bonus { color: #198754; }
#final-scores-list .score-neutral { color: #6c757d; }

#results-section .nav-link { color: #495057; }
#results-section .nav-link.active { font-weight: bold; color: #0d6efd; }

#download-excel-btn { display: none; }

/* Transitions */
#main-content, #doctor-info-card, #welcome-message, #results-section {
    transition: opacity 0.5s ease-in-out;
}

# --------------------------------------------------------------------------
# 檔案: static/js/main.js
# --------------------------------------------------------------------------
document.addEventListener('DOMContentLoaded', function () {
    const path = window.location.pathname;
    if (path.startsWith('/doctor')) {
        initDoctorPage();
    } else if (path.startsWith('/admin')) {
        initAdminPage();
    }
});

// --- Doctor Page Logic ---
function initDoctorPage() {
    const doctorSelect = document.getElementById('doctor-select');
    const yearSelect = document.getElementById('year-select');
    const monthSelect = document.getElementById('month-select');
    const calendarDiv = document.getElementById('calendar');
    const calendarTitle = document.getElementById('calendar-title');
    const submitButton = document.getElementById('submit-schedule');
    const doctorInfoCard = document.getElementById('doctor-info-card');
    const mainContent = document.getElementById('main-content');
    const welcomeMessage = document.getElementById('welcome-message');

    let currentDoctor = null, currentYear = 2025, currentMonth = 1;
    let isDragging = false, dragStartDay = null, dragToggleState = false;

    for (let y = 2025; y <= 2026; y++) yearSelect.add(new Option(y, y));
    for (let m = 1; m <= 12; m++) monthSelect.add(new Option(m, m));
    yearSelect.value = currentYear; monthSelect.value = currentMonth;

    doctorSelect.addEventListener('change', async () => {
        currentDoctor = doctorSelect.value;
        if (currentDoctor) {
            welcomeMessage.classList.add('d-none');
            mainContent.classList.remove('d-none');
            doctorInfoCard.classList.remove('d-none');
            await updateDoctorInfo();
            await loadAndRenderCalendar();
        }
    });

    [yearSelect, monthSelect].forEach(el => el.addEventListener('change', () => {
        currentYear = parseInt(yearSelect.value);
        currentMonth = parseInt(monthSelect.value);
        loadAndRenderCalendar();
    }));

    submitButton.addEventListener('click', submitDaysOff);

    async function updateDoctorInfo() {
        const response = await fetch(`/api/doctor_info/${currentDoctor}`);
        const data = await response.json();
        document.getElementById('info-card-name').textContent = currentDoctor;
        document.getElementById('info-card-area').textContent = data.區域;
        document.getElementById('info-card-points').textContent = data.點數上限;
    }

    async function loadAndRenderCalendar() {
        if (!currentDoctor) return;
        const response = await fetch(`/api/schedule_data/${currentYear}/${currentMonth}`);
        const data = await response.json();
        const doctorSchedule = data.submissions[currentDoctor] || { days_off: [] };
        renderCalendar(doctorSchedule.days_off, data.holidays);
    }

    function renderCalendar(selectedDays, holidays) {
        calendarDiv.innerHTML = '';
        calendarTitle.textContent = `${currentYear} 年 ${currentMonth} 月`;
        
        const daysInMonth = new Date(currentYear, currentMonth, 0).getDate();
        const firstDayOfMonth = new Date(currentYear, currentMonth - 1, 1).getDay();
        const dayHeaders = ['日', '一', '二', '三', '四', '五', '六'];

        dayHeaders.forEach(h => {
            const el = document.createElement('div');
            el.classList.add('calendar-day', 'header');
            el.textContent = h;
            calendarDiv.appendChild(el);
        });

        for (let i = 0; i < firstDayOfMonth; i++) {
            const el = document.createElement('div');
            el.classList.add('calendar-day', 'other-month');
            calendarDiv.appendChild(el);
        }

        for (let day = 1; day <= daysInMonth; day++) {
            const dayEl = document.createElement('div');
            dayEl.classList.add('calendar-day', 'available');
            dayEl.textContent = day;
            dayEl.dataset.day = day;

            if (holidays.includes(day)) dayEl.classList.add('holiday');
            if (selectedDays.includes(day)) dayEl.classList.add('selected');

            calendarDiv.appendChild(dayEl);
        }
        addDragListeners();
    }

    function addDragListeners() {
        calendarDiv.addEventListener('mousedown', e => {
            if (e.target.classList.contains('available')) {
                isDragging = true;
                dragStartDay = parseInt(e.target.dataset.day);
                dragToggleState = !e.target.classList.contains('selected');
                e.target.classList.toggle('selected', dragToggleState);
                e.preventDefault();
            }
        });

        calendarDiv.addEventListener('mouseover', e => {
            if (isDragging && e.target.classList.contains('available')) {
                const currentDay = parseInt(e.target.dataset.day);
                const start = Math.min(dragStartDay, currentDay);
                const end = Math.max(dragStartDay, currentDay);
                
                calendarDiv.querySelectorAll('.available').forEach(cell => {
                    const day = parseInt(cell.dataset.day);
                    if (day >= start && day <= end) {
                        cell.classList.add('selecting');
                    } else {
                        cell.classList.remove('selecting');
                    }
                });
            }
        });

        document.addEventListener('mouseup', () => {
            if (isDragging) {
                isDragging = false;
                calendarDiv.querySelectorAll('.selecting').forEach(cell => {
                    cell.classList.toggle('selected', dragToggleState);
                    cell.classList.remove('selecting');
                });
                dragStartDay = null;
            }
        });
    }

    async function submitDaysOff() {
        const daysOff = Array.from(calendarDiv.querySelectorAll('.selected')).map(el => parseInt(el.dataset.day));
        submitButton.disabled = true;
        submitButton.innerHTML = `<span class="spinner-border spinner-border-sm"></span> 提交中...`;
        try {
            const response = await fetch('/api/submit_days_off', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ doctor: currentDoctor, year: currentYear, month: currentMonth, daysOff })
            });
            const result = await response.json();
            alert(result.status === 'success' ? '預休日期已成功提交！' : `提交失敗：${result.message}`);
        } catch (error) {
            alert('提交時發生錯誤。');
        } finally {
            submitButton.disabled = false;
            submitButton.innerHTML = `<i class="bi bi-check-circle-fill"></i> 提交本月預休`;
        }
    }
}

// --- Admin Page Logic ---
function initAdminPage() {
    const yearSelect = document.getElementById('admin-year-select');
    const monthSelect = document.getElementById('admin-month-select');
    const statusList = document.getElementById('submission-status-list');
    const runButton = document.getElementById('run-scheduler-btn');
    const helpText = document.getElementById('run-scheduler-help');
    const logOutput = document.getElementById('log-output');
    const toggleLogBtn = document.getElementById('toggle-log-btn');
    const resultsSection = document.getElementById('results-section');
    const statusMonthTitle = document.getElementById('status-month-title');
    
    let currentYear = 2025, currentMonth = 1, eventSource = null;

    for (let y = 2025; y <= 2026; y++) yearSelect.add(new Option(y, y));
    for (let m = 1; m <= 12; m++) monthSelect.add(new Option(`${m} 月`, m));
    yearSelect.value = currentYear; monthSelect.value = currentMonth;

    [yearSelect, monthSelect].forEach(el => el.addEventListener('change', () => {
        currentYear = parseInt(yearSelect.value);
        currentMonth = parseInt(monthSelect.value);
        updateSubmissionStatus();
    }));

    runButton.addEventListener('click', runScheduler);
    toggleLogBtn.addEventListener('click', () => logOutput.classList.toggle('minimized'));

    async function updateSubmissionStatus() {
        statusMonthTitle.textContent = `${currentYear} 年 ${currentMonth} 月`;
        const response = await fetch(`/api/schedule_data/${currentYear}/${currentMonth}`);
        const data = await response.json();
        
        statusList.innerHTML = '';
        const notSubmitted = Object.entries(data.submissions).filter(([_, info]) => !info.submitted);

        if (Object.keys(data.submissions).length === 0) {
            statusList.innerHTML = `<li class="list-group-item">該月份無醫師資料</li>`;
            runButton.disabled = true;
            helpText.textContent = '資料錯誤，無法排班。';
        } else if (notSubmitted.length === 0) {
            statusList.innerHTML = `<li class="list-group-item list-group-item-success">所有醫師皆已提交</li>`;
            runButton.disabled = false;
            helpText.textContent = '可以開始排班。';
        } else {
            notSubmitted.forEach(([doctor, _]) => {
                const li = document.createElement('li');
                li.classList.add('list-group-item', 'd-flex', 'justify-content-between', 'align-items-center');
                li.textContent = doctor;
                li.innerHTML += `<span class="badge bg-warning text-dark">尚未提交</span>`;
                statusList.appendChild(li);
            });
            runButton.disabled = true;
            helpText.textContent = `尚有 ${notSubmitted.length} 位醫師未提交。`;
        }
    }

    function runScheduler() {
        if (eventSource) eventSource.close();
        
        runButton.disabled = true;
        runButton.innerHTML = `<span class="spinner-border spinner-border-sm"></span> 運算中...`;
        logOutput.textContent = '正在連接後端排班引擎...';
        logOutput.classList.remove('minimized');
        toggleLogBtn.classList.add('d-none');
        resultsSection.classList.add('d-none');
        isFirstLog = true;

        // *** 修正: 直接在 URL 中傳遞參數給 EventSource
        const url = `/api/run_scheduler?year=${currentYear}&month=${currentMonth}`;
        eventSource = new EventSource(url);

        eventSource.onmessage = e => handleLogMessage(e.data);
        eventSource.addEventListener('DONE', e => handleDoneEvent(JSON.parse(e.data)));
        eventSource.onerror = () => {
            logOutput.textContent += '\n與伺服器連線中斷或發生錯誤。';
            eventSource.close();
            resetRunButton();
        };
    }
    
    let isFirstLog = true;
    function handleLogMessage(data) {
        if (isFirstLog) { logOutput.textContent = ''; isFirstLog = false; }
        logOutput.textContent += data + '\n';
        logOutput.scrollTop = logOutput.scrollHeight;
    }

    function handleDoneEvent(data) {
        if (data.status === 'success') {
            displayResults(data);
            logOutput.classList.add('minimized');
            toggleLogBtn.classList.remove('d-none');
            setTimeout(() => resultsSection.scrollIntoView({ behavior: 'smooth' }), 100);
        } else {
            logOutput.textContent += `\n排班失敗: ${data.message}`;
        }
        resetRunButton();
        eventSource.close();
    }
    
    function resetRunButton() {
        runButton.disabled = false;
        runButton.innerHTML = '<i class="bi bi-calculator-fill"></i> 一鍵排班';
        updateSubmissionStatus();
    }

    function displayResults(data) {
        resultsSection.classList.remove('d-none');
        
        const scoresList = document.getElementById('final-scores-list');
        scoresList.innerHTML = '';
        for (const [key, value] of Object.entries(data.final_scores)) {
            const li = document.createElement('li');
            li.classList.add('list-group-item');
            const valueClass = key.includes('懲罰') ? (value > 0 ? 'score-penalty' : 'score-bonus') : (key.includes('獎勵') ? (value > 0 ? 'score-bonus' : 'score-penalty') : 'score-neutral');
            li.innerHTML = `<span>${key}</span><span class="score-value ${valueClass}">${value}</span>`;
            scoresList.appendChild(li);
        }

        renderScheduleTable(data.schedule_data);
        document.getElementById('points-summary-html').innerHTML = data.points_summary_html;
        
        const downloadBtn = document.getElementById('download-excel-btn');
        downloadBtn.href = data.excel_url;
        downloadBtn.style.display = 'inline-block';
    }

    function renderScheduleTable(data) {
        const container = document.getElementById('doctor-schedule-render-area');
        const table = document.createElement('table');
        table.className = 'schedule-table';
        
        const thead = table.createTHead();
        const headerRow = thead.insertRow();
        headerRow.insertCell().textContent = '醫師';
        for (let day = 1; day <= data.num_days; day++) {
            const th = document.createElement('th');
            th.textContent = day;
            headerRow.appendChild(th);
        }

        const tbody = table.createTBody();
        data.doctors.forEach(doc => {
            const row = tbody.insertRow();
            row.insertCell().textContent = doc;
            for (let day = 1; day <= data.num_days; day++) {
                const cell = row.insertCell();
                const dayOfWeek = new Date(currentYear, currentMonth - 1, day).getDay();

                if (data.holidays.includes(day)) cell.classList.add('cell-holiday');
                else if ([0, 6].includes(dayOfWeek)) cell.classList.add('cell-weekend');

                if (data.days_off[doc].includes(day)) {
                    cell.textContent = '預休';
                    cell.classList.add('cell-dayoff');
                } else if (data.schedule[doc] && data.schedule[doc][day]) {
                    const area = data.schedule[doc][day];
                    cell.textContent = area;
                    cell.classList.add(`cell-area-${area}`);
                }
            }
        });
        container.innerHTML = '';
        container.appendChild(table);
    }

    updateSubmissionStatus();
}
